/*계정 생성하기(관리자계정으로 접속해서)*/
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

CREATE USER SPRING_LIK IDENTIFIED BY SPRING1234;

GRANT CONNECT, RESOURCE TO SPRING_LIK; 

ALTER USER SPRING_LIK
DEFAULT TABLESPACE USERS
QUOTA 20M ON USERS;  --테이블 만들 공간 20메가만 줌
--계정생성 끝!

-->계정 생성 후 접속 방법(새 데이터베이스) 추가하기(왼쪽 새 데이터 베이스 연결 플러그 버튼 눌러서)
----------------------------------------------------------------------------------------------
/*SPRING계정 접속해서 테이블 만들기*/
--SQL에서 "" : 쌍따옴표 내부에 작성된 글(모양) 그대로 인식해라 -> 대/소문자가 구분된다
-->""작성 권장!
--member == MEMBER
--"member" !="MEMBER"

--영어,숫자, 키보드에 있:1바이트 // 한글, 키보드에 없는 특수문자 : 3바이트

--CHAR(10)		: 고정 길이 문자열 10바이트 -> 최대 2000바이트
--VARCHAR2(10): 가변 길이 문자열 10바이트(남는 공간 반환됨) -> 최대 4000바이트 ->요즘 이거 안쓰고 밑에거 사용
--VARCHAR2는 UTF-8 이용

--NVARCHAR2(10) : 가변 길이 문자열 10글자( !=10바이트)(한글이든 영어든 숫자든 다 10글자 저장 가능) ->최대 4000바이트
--NVARCHAR2는 유니코드 이용
--CLOB : 가변 길이 문자열(최대 4GB)

/*MEMBER 테이블 생성하기*/
CREATE TABLE "MEMBER"(
	--쌍따옴표 써서, 소문자로 쓰면 인식안되고 대문자로만 써야 함!
	"MEMBER_NO" 			NUMBER CONSTRAINT "MEMBER_PK" PRIMARY KEY, --제약조건 이름 지정
	"MEMBER_EMAIL" 		NVARCHAR2(50) NOT NULL,
	"MEMBER_PW" 			NVARCHAR2(100) NOT NULL,--암호화 하면 더 길게 변함
	"MEMBER_NICKNAME" NVARCHAR2(10) NOT NULL, --아이디가 아닌 닉네임 노출시키기
	"MEMBER_TEL" 			CHAR(11) NOT NULL, --01012341234
	"MEMBER_ADDRESS" 	NVARCHAR2(150), --주소 검색 API 쓸거임
	"PROFILE_IMG" 		VARCHAR2(300), --프로필 이미지->그 파일이 어디있는지 파일 경로를 저장(영어로 돼있어서 VARCHAR)
	"ENROLL_DATE" 		DATE DEFAULT SYSDATE NOT NULL,--가입일
	"MEMBER_DEL_FL" 	CHAR(1) DEFAULT 'N'--회원 삭제 플래그(탈퇴 여부 기록)
										CHECK("MEMBER_DEL_FL" IN ('Y', 'N')),
	"AUTHORITY" 			NUMBER DEFAULT 1 --권한
										CHECK("AUTHORITY" IN (1,2)) --1번이 일반 회원, 2번이 관리자
);
--회원 번호 시퀀스 만들기
CREATE SEQUENCE SEQ_MEMBER_NO NOCACHE;
--sql도 깃허브에 올라가서 위의 계정 생성부분도 지우고 올리는 게 좋다
--샘플 회원 데이터 하나 삽입하기
INSERT INTO "MEMBER"
VALUES(SEQ_MEMBER_NO.NEXTVAL, 
				'member01@kh.or.kr',
				'$2a$10$vonrRgV/jcdE6q1H8YJ31e1Xl1CYlydO034MMBYdMvo/S7GaSS796',
				'샘플1',
				'01012341234',
				NULL,
				NULL,
				DEFAULT,
				DEFAULT,
				DEFAULT
);
COMMIT;

--로그인 하는 SQL 작성
--로그인 조건 : BCrypt 암호화 사용 중이어서
--					DB에서 비밀번호 비교 불가능!
--					->그래서 비밀번호를 SELECT문으로 조회한다!
--			이메일을 이용해서 이메일이 일치하고 탈퇴를 안 한 회원 조건만 추가하기(조건으로 비밀번호를 쓸 수는 없으니까!)
SELECT MEMBER_NO , MEMBER_EMAIL , MEMBER_NICKNAME , MEMBER_PW , MEMBER_TEL , MEMBER_ADDRESS ,
PROFILE_IMG , AUTHORITY , 
TO_CHAR(ENROLL_DATE,'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"' ) ENROLL_DATE
--TO_CHAR : 지정한 패턴의 문자열로 바뀜
--회원번호가 PK여서 모든 것 조회 시 필요
--비밀번호 가져와서 비교해야 해서 비밀번호도 필요
FROM "MEMBER"
WHERE MEMBER_EMAIL =?
AND MEMBER_DEL_FL ='N';



SELECT * FROM "MEMBER";

--이메일 중복 검사(탈퇴 안 한 회원 중 같은 이메일이 있는 지 조회)
--같은 게 있는지 조회
SELECT COUNT(*) FROM "MEMBER" WHERE MEMBER_DEL_FL  = 'N'
AND MEMBER_EMAIL =;

DELETE FROM "MEMBER"
WHERE MEMBER_EMAIL ='ink0216@naver.com';
COMMIT;
SELECT * FROM "MEMBER";

--인증번호가 잘 안돼서 DB이용하는 인증 방법 시도!
/*이메일, 인증키 저장하는 테이블 생성하기*/
CREATE TABLE "TB_AUTH_KEY"(
	"KEY_NO" NUMBER PRIMARY KEY,
	"EMAIL" NVARCHAR2(50) NOT NULL,
	"AUTH_KEY" CHAR(6) NOT NULL,
	"CREATE_TIME" DATE DEFAULT SYSDATE NOT NULL  --인증번호가 만들어진 시간(이거 이용하면 JS 말고 DB에서도 컨트롤 가능)
);
COMMENT ON COLUMN "TB_AUTH_KEY"."KEY_NO" IS '인증키 구분 번호(시퀀스)';
COMMENT ON COLUMN "TB_AUTH_KEY"."EMAIL" IS '인증 이메일';
COMMENT ON COLUMN "TB_AUTH_KEY"."AUTH_KEY" IS '인증 번호';
COMMENT ON COLUMN "TB_AUTH_KEY"."CREATE_TIME" IS '인증 번호 생성 시간';

CREATE SEQUENCE SEQ_KEY_NO NOCACHE; --인증키 구분 번호 시퀀스

--인증하기 버튼 누르면 인증 이메일과 인증번호를 TB_AUTH_KEY 테이블에 넣어둘거다
SELECT * FROM "TB_AUTH_KEY";

SELECT COUNT(*) FROM "TB_AUTH_KEY"
WHERE EMAIL = #{가입하려는 이메일 입력값}
AND AUTH_KEY = #{위 이메일로 보낸 인증번호};


--------------------------------------------------------------------------
--파일 업로드 테스트용 테이블
CREATE TABLE "UPLOAD_FILE"(
	FILE_NO NUMBER PRIMARY KEY,
	FILE_PATH VARCHAR2(500) NOT NULL,
	FILE_ORIGINAL_NAME VARCHAR2(300) NOT NULL,
	FILE_RENAME VARCHAR2(100) NOT NULL,
	FILE_UPLOAD_DATE DATE DEFAULT SYSDATE,
	MEMBER_NO NUMBER REFERENCES "MEMBER" --FK 제약조건 설정
	--부모테이블의 PK역할하는 MEMBER_NO 참조(누가 올렸는지 기록)
);
COMMENT ON COLUMN "UPLOAD_FILE".FILE_NO IS '파일 번호(PK)';
COMMENT ON COLUMN "UPLOAD_FILE".FILE_PATH IS '클라이언트 요청 경로(webPath)';
COMMENT ON COLUMN "UPLOAD_FILE".FILE_ORIGINAL_NAME IS '파일 원본명';
COMMENT ON COLUMN "UPLOAD_FILE".FILE_RENAME IS '변경된 파일명'; 
--서버의 한 폴더에 같은이름,같은확장자 파일 2개이상이 업로드 돼서 여러 명이 같은 이름,확장자로 업로드 시 나중 파일로 덮어씌워져서 
--항상 이름이 바뀌어서 저장되도록 함
COMMENT ON COLUMN "UPLOAD_FILE".FILE_UPLOAD_DATE IS '업로드 날짜';
COMMENT ON COLUMN "UPLOAD_FILE".MEMBER_NO IS 'MEMBER 테이블의 PK(MEMBER_NO)참조';

--파일 번호에 사용할 시퀀스
CREATE SEQUENCE SEQ_FILE_NO NOCACHE;

SELECT * ;

--DB에는 Date타입인데 String타입으로 바꿔야 한다 TO_CHAR 이용해서 문자열로 바꾸기
--파일 목록 조회
SELECT FILE_NO , FILE_PATH , FILE_ORIGINAL_NAME , FILE_RENAME , 
	TO_CHAR(FILE_UPLOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') FILE_UPLOAD_DATE , --컬럼 별칭(DTO에 담기게 하려고)
	MEMBER_NICKNAME 
FROM UPLOAD_FILE
JOIN "MEMBER" USING(MEMBER_NO)
ORDER BY FILE_NO DESC; --그럼 최근 게 가장 위에 나옴
---------------------------------------------------------------------------------------
COMMENT ON COLUMN "MEMBER"."MEMBER_NO" IS '회원 번호(PK)';

COMMENT ON COLUMN "MEMBER"."MEMBER_EMAIL" IS '회원 이메일(ID 역할)';

COMMENT ON COLUMN "MEMBER"."MEMBER_PW" IS '회원 비밀번호(암호화)';

COMMENT ON COLUMN "MEMBER"."MEMBER_NICKNAME" IS '회원 닉네임';

COMMENT ON COLUMN "MEMBER"."MEMBER_TEL" IS '회원 전화번호';

COMMENT ON COLUMN "MEMBER"."MEMBER_ADDRESS" IS '회원 주소';

COMMENT ON COLUMN "MEMBER"."PROFILE_IMG" IS '프로필 이미지';

COMMENT ON COLUMN "MEMBER"."ENROLL_DATE" IS '회원 가입일';

COMMENT ON COLUMN "MEMBER"."MEMBER_DEL_FL" IS '회원 탈퇴 여부(Y,N)';

COMMENT ON COLUMN "MEMBER"."AUTHORITY" IS '권한(1: 일반 // 2: 관리자)';



COMMENT ON COLUMN "UPLOAD_FILE"."FILE_NO" IS '파일 번호(PK)';

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_PATH" IS '파일 요청 경로(웹 주소)';

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_ORIGINAL_NAME" IS '파일 원본명';

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_RENAME" IS '파일 변경명';

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_UPLOAD_DATE" IS '업로드 날짜';

COMMENT ON COLUMN "UPLOAD_FILE"."MEMBER_NO" IS '업로드한 회원 번호';
/*게시판 테이블 생성*/
CREATE TABLE "BOARD" (
	"BOARD_NO"	NUMBER		NOT NULL,
	"BOARD_TITLE"	NVARCHAR2(100)		NOT NULL,
	"BOARD_CONTENT"	VARCHAR2(4000)		NOT NULL,
	"BOARD_WRITE_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"BOARD_UPDATE_DATE"	DATE		NULL,
	"READ_COUNT"	NUMBER	DEFAULT 0	NOT NULL,
	"BOARD_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"BOARD_CODE"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "BOARD"."BOARD_NO" IS '게시글 번호(PK)';

COMMENT ON COLUMN "BOARD"."BOARD_TITLE" IS '게시글 제목';

COMMENT ON COLUMN "BOARD"."BOARD_CONTENT" IS '게시글 내용';

COMMENT ON COLUMN "BOARD"."BOARD_WRITE_DATE" IS '게시글 작성일';

COMMENT ON COLUMN "BOARD"."BOARD_UPDATE_DATE" IS '게시글 마지막 수정일';

COMMENT ON COLUMN "BOARD"."READ_COUNT" IS '조회수';

COMMENT ON COLUMN "BOARD"."BOARD_DEL_FL" IS '게시글 삭제 여부(Y,N)';

COMMENT ON COLUMN "BOARD"."BOARD_CODE" IS '게시판 종류 코드 번호';

COMMENT ON COLUMN "BOARD"."MEMBER_NO" IS '작성한 회원 번호(FK)';

CREATE TABLE "BOARD_TYPE" (
	"BOARD_CODE"	NUMBER		NOT NULL,
	"BOARD_NAME"	NVARCHAR2(20)		NOT NULL
);

COMMENT ON COLUMN "BOARD_TYPE"."BOARD_CODE" IS '게시판 종류 코드 번호';

COMMENT ON COLUMN "BOARD_TYPE"."BOARD_NAME" IS '게시판명';

CREATE TABLE "BOARD_LIKE" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"BOARD_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "BOARD_LIKE"."MEMBER_NO" IS '회원 번호(PK)';

COMMENT ON COLUMN "BOARD_LIKE"."BOARD_NO" IS '게시글 번호(PK)';

CREATE TABLE "BOARD_IMG" (
	"IMG_NO"	NUMBER		NOT NULL,
	"IMG_PATH"	VARCHAR2(200)		NOT NULL,
	"IMG_ORIGINAL_NAME"	NVARCHAR2(50)		NOT NULL,
	"IMG_RENAME"	NVARCHAR2(50)		NOT NULL,
	"IMG_ORDER"	NUMBER		NULL,
	"BOARD_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "BOARD_IMG"."IMG_NO" IS '이미지 번호(PK)';

COMMENT ON COLUMN "BOARD_IMG"."IMG_PATH" IS '이미지 요청 경로';

COMMENT ON COLUMN "BOARD_IMG"."IMG_ORIGINAL_NAME" IS '이미지 원본명';

COMMENT ON COLUMN "BOARD_IMG"."IMG_RENAME" IS '이미지 변경명';

COMMENT ON COLUMN "BOARD_IMG"."IMG_ORDER" IS '이미지 순서';

COMMENT ON COLUMN "BOARD_IMG"."BOARD_NO" IS '게시글 번호(PK)';

CREATE TABLE "COMMENT" (
	"COMMENT_NO"	NUMBER		NOT NULL,
	"COMMENT_CONTENT"	VARCHAR2(4000)		NOT NULL,
	"COMMENT_WRITE_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"COMMENT_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"BOARD_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"PARENT_COMMENT_NO"	NUMBER		NOT NULL,
	"Field"	VARCHAR(255)		NULL
);

COMMENT ON COLUMN "COMMENT"."COMMENT_NO" IS '댓글 번호(PK)';

COMMENT ON COLUMN "COMMENT"."COMMENT_CONTENT" IS '댓글 내용';

COMMENT ON COLUMN "COMMENT"."COMMENT_WRITE_DATE" IS '댓글 작성일';

COMMENT ON COLUMN "COMMENT"."COMMENT_DEL_FL" IS '댓글 삭제 여부(Y,N)';

COMMENT ON COLUMN "COMMENT"."BOARD_NO" IS '게시글 번호(PK)';

COMMENT ON COLUMN "COMMENT"."MEMBER_NO" IS '회원 번호(PK)';

COMMENT ON COLUMN "COMMENT"."PARENT_COMMENT_NO" IS '부모 댓글 번호';
---------------------------------------------------------------
--PK
ALTER TABLE "MEMBER" ADD CONSTRAINT "PK_MEMBER" PRIMARY KEY (
	"MEMBER_NO"
);

ALTER TABLE "UPLOAD_FILE" ADD CONSTRAINT "PK_UPLOAD_FILE" PRIMARY KEY (
	"FILE_NO"
);

ALTER TABLE "BOARD" ADD CONSTRAINT "PK_BOARD" PRIMARY KEY (
	"BOARD_NO"
);

ALTER TABLE "BOARD_TYPE" ADD CONSTRAINT "PK_BOARD_TYPE" PRIMARY KEY (
	"BOARD_CODE"
);

ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "PK_BOARD_LIKE" PRIMARY KEY (
	"MEMBER_NO",
	"BOARD_NO"
);

ALTER TABLE "BOARD_IMG" ADD CONSTRAINT "PK_BOARD_IMG" PRIMARY KEY (
	"IMG_NO"
);

ALTER TABLE "COMMENT" ADD CONSTRAINT "PK_COMMENT" PRIMARY KEY (
	"COMMENT_NO"
);
---여기서부터 FK
ALTER TABLE "UPLOAD_FILE" ADD CONSTRAINT "FK_MEMBER_TO_UPLOAD_FILE_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "BOARD" ADD CONSTRAINT "FK_BOARD_TYPE_TO_BOARD_1" FOREIGN KEY (
	"BOARD_CODE"
)
REFERENCES "BOARD_TYPE" (
	"BOARD_CODE"
);

ALTER TABLE "BOARD" ADD CONSTRAINT "FK_MEMBER_TO_BOARD_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "FK_MEMBER_TO_BOARD_LIKE_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "FK_BOARD_TO_BOARD_LIKE_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
);

ALTER TABLE "BOARD_IMG" ADD CONSTRAINT "FK_BOARD_TO_BOARD_IMG_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
);

ALTER TABLE "COMMENT" ADD CONSTRAINT "FK_BOARD_TO_COMMENT_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
);

ALTER TABLE "COMMENT" ADD CONSTRAINT "FK_MEMBER_TO_COMMENT_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "COMMENT" ADD CONSTRAINT "FK_COMMENT_TO_COMMENT_1" FOREIGN KEY (
	"PARENT_COMMENT_NO"
)
REFERENCES "COMMENT" (
	"COMMENT_NO"
);
--CHECK 제약 조건(여기서는 ERDCLOUD에서 못 만듦 -> 여기서 함)
--게시글 삭제 여부
ALTER TABLE "BOARD" ADD
CONSTRAINT "BOARD_DEL_CHECK" 
CHECK("BOARD_DEL_FL" IN ('Y','N'));

--댓글 삭제 여부
ALTER TABLE "COMMENT" ADD --코멘트는 무조건 쌍따옴표로 써야 함(예약어가 존재해서)
CONSTRAINT "COMMENT_DEL_CHECK" 
CHECK("COMMENT_DEL_FL" IN ('Y','N'));
--------------------------------------------------------------------
/*책 관리 프로젝트(연습용)*/
CREATE TABLE "BOOK" (
	"BOOK_NO"	NUMBER		NOT NULL,
	"BOOK_TITLE"	NVARCHAR2(50)		NOT NULL,
	"BOOK_WRITER"	NVARCHAR2(20)		NOT NULL,
	"BOOK_PRICE"	NUMBER		NOT NULL,
	"REG_DATE"	DATE	DEFAULT SYSDATE	NOT NULL
);

COMMENT ON COLUMN "BOOK"."BOOK_NO" IS '책 번호';

COMMENT ON COLUMN "BOOK"."BOOK_TITLE" IS '책 제목';

COMMENT ON COLUMN "BOOK"."BOOK_WRITER" IS '글쓴이';

COMMENT ON COLUMN "BOOK"."BOOK_PRICE" IS '책 가격';

COMMENT ON COLUMN "BOOK"."REG_DATE" IS '등록일';

ALTER TABLE "BOOK" ADD CONSTRAINT "PK_BOOK" PRIMARY KEY (
	"BOOK_NO"
);
--도서 번호 시퀀스 만들기
CREATE SEQUENCE SEQ_BOOK_NO NOCACHE;

--UPLOAD_FILE FK 제약조건 삭제하고 다시 설정하기 (ON DELETE SET NULL로)
ALTER TABLE UPLOAD_FILE 
DROP CONSTRAINT SYS_C007575;
ALTER TABLE UPLOAD_FILE 
ADD CONSTRAINT "FK_SETNULL" 
FOREIGN KEY(MEMBER_NO)
REFERENCES "MEMBER"(MEMBER_NO)
ON DELETE SET NULL;
/*ALTER TABLE EMP01
ADD CONSTRAINT EMP01_DEPTNO_FK
FOREIGN KEY(DEPTNO) REFERENCES DEPT(DEPTNO); 
[출처] [Oracle] 제약 조건 추가하기 (ADD ALTER, ADD MODIFY)|작성자 개구리*/

















