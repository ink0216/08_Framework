<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.board.model.mapper.BoardMapper">
	<!-- DTO가 아니어서 마이바티스가 카멜표기법으로 못바꿔줘서 * 로 하면 안되고 별칭 지정해야된다!!! -->
		<!-- 그냥 하면 컬럼값들이 value로 넘어갈 때 key는 컬럼명인데 * 로 하면 언더스코어 표기법의 key로 자바로 넘어가서 -->
		<!-- 자바에서는 언더스코어 표기법 적절 x -->
		
	<!-- resultMap 태그 작성 
		- 1) 조회된 컬럼명과 DTO 필드명이 일치하지 않을 때 
			하나씩 결과컬럼을 수동으로 매핑(연결)시켜주는 역할 (근데 지금은 이름 똑같게 해서 쓸 일 없다)
		  2) 내부에 <collection> 태그를 추가 작성하여 
		  	  여러 행 결과가 조회되는 다른 SELECT를 수행한 후
		  	  그 결과를 지정된 DTO의 필드에 대입하는 역할 (지금 사용할 역할은 이거!!)
		  
		  type 속성 : 연결할 DTO 경로 또는 별칭을 쓰면 된다
		  id   속성 : 해당 태그를 식별할 값(이름)
		  		-->	
	<resultMap type="Board" id="board_rm">
	<!-- id태그 : PK 역할을 하는 컬럼(column), 필드(property)를 작성하는 태그 -->
		<id property="boardNo" column="BOARD_NO"/>
		<!-- collection 태그
			select로 조회된 결과를 컬렉션(List)에 담아
			지정된 필드에 세팅
			
			property : List를 담을 DTO의 필드명
			select : 실행할 select의 id
			column : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
			javaType : List(컬렉션)의 타입을 지정
			ofType : List(컬렉션)의 제네릭(타입 제한) 지정
		-->
		<!-- 해당 게시글 이미지 목록 조회 후 Board 필드에 저장 -->
		<collection 
		property="imageList"
		select="selectImageList"
		column="BOARD_NO"
		javaType="java.util.ArrayList"
		ofType = "BoardImg"
		
		/>
		<!-- 실행할 때 
		처음 수행한 sql 결과의 BOARD_NO를 다음 sql들에 전달해서 결과를 ArrayList로 해서 이미지리스트에다 저장할거야 -->
		<!-- selectImageList를 실행하면 결과가 여러 행이 나오는데 파라미터를 board_no 컬럼값 전달할거고 그 결과를 ArrayList로 전달할건데
		BoardImg 타입으로 제한된 ArrayList에 저장해서 imageList 필드에 집어넣겠다 -->
		<!-- 태그를 시작하자마자 종료하겠다 -->
		<!-- Board 내부에서 imageList 컬럼의 값을 저장할거야 -->
		<!-- id가 selectImageList인 것을 수행하겠다 -->
		<!-- 이거 수행하면 리스트가 반환되는데 그걸 Board의 imageList 필드에 저장할거다 -->
		
		<!-- 해당 게시글 댓글 목록 조회 후 Board 필드에 저장 -->
		<collection 
		property="commentList"
		select="selectCommentList"
		column="BOARD_NO"
		javaType="java.util.ArrayList"
		ofType = "Comment"
		/>
	</resultMap>
	<!-- 게시판 종류 목록 조회 (+ 표기법 변경) -->
	<select id="selectBoardTypeList">
		SELECT BOARD_CODE "boardCode", 
		BOARD_NAME "boardName" 
		FROM "BOARD_TYPE"
		ORDER BY BOARD_CODE
	</select>

<!-- resultType을 미작성 할 수 있는 조건 
	== mapper 메서드의 반환형이 별칭으로 등록되어 있을 때
	_int는 자바의 int의 별칭으로,
	List는 list, Map은 map이라고 별칭으로 등록돼있어서 이것들도
	DTO도 다 DBConfig에서 최상위 패키지 이하의 모든 클래스도 별칭 지정해놔서 resultType안쓸 수 있다
	조건에 맞을 때에만 안 쓸 수 있고 안맞으면 써야 한다!!  -->
<!-- 삭제되지 않은 게시글 수 조회하기 -->
	<select id="getListCount">
	SELECT COUNT(*)
	FROM "BOARD"
	WHERE BOARD_DEL_FL='N'
	AND BOARD_CODE=#{boardCode}
	</select>
	<!-- mybatis에 전달할 파라미터는 항상 한 개!!  -->
	
	<!-- 특정 게시판의 지정된 페이지 목록 조회(공지 게시판의 2페이지 볼거다) -->
	<!-- rowBounds는 우리가 언급 안해도 자동으로 적용된다 -->
	<!-- xml, html은 마크업언어여서 부등호가 부등호가 아닌 태그처럼 해석돼서 에러남
	(이건 >처럼 닫는 부등호는 해당되지 않고, <처럼 여는 부등호에 해당되는 얘기이다!!! xml은 태그모양을 인식해서 태그 여는 모양이면, 태그로 인식한다!!!!)
		->  <![CDATA["문자열"]]> 이런 모양의 태그가 있다
			- 해당 태그 내부에 작성된 문자열은
				특수 기호로 해석하지 말고
				문자(Character)그대로 인식하라는 태그 (순수 문자 데이터임을 지정)(태그, 부등호 이런거 아니고 그냥 문자야)
	 -->
	<select id="selectBoardList">
	SELECT BOARD_NO, BOARD_TITLE , MEMBER_NICKNAME,READ_COUNT,
	
	(SELECT COUNT(*)
	FROM "COMMENT" C
	WHERE C.BOARD_NO = B.BOARD_NO
	AND COMMENT_DEL_FL='N') COMMENT_COUNT,
	(SELECT COUNT(*)
	FROM BOARD_LIKE L
	WHERE L.BOARD_NO=B.BOARD_NO) LIKE_COUNT,
	<![CDATA[ 
		CASE --이 네 가지 중 하나를 선택해서 한 컬럼이 나온다
			WHEN SYSDATE-BOARD_WRITE_DATE < 1/24/60 
			THEN FLOOR((SYSDATE-BOARD_WRITE_DATE)*24*60*60)||'초 전'
			
			WHEN SYSDATE-BOARD_WRITE_DATE < 1/24 
			THEN FLOOR((SYSDATE-BOARD_WRITE_DATE)*24*60)||'분 전'
			
			WHEN SYSDATE-BOARD_WRITE_DATE < 1 
			THEN FLOOR((SYSDATE-BOARD_WRITE_DATE)*24)||'시간 전'
			
			ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD') --아무 케이스에도 안 들어가는 경우
		END BOARD_WRITE_DATE --별칭
	]]>
	FROM "BOARD" B
	JOIN "MEMBER" USING(MEMBER_NO)
	WHERE BOARD_DEL_FL ='N'
	AND BOARD_CODE= #{boardCode}
	ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 게시글 상세 조회 -->
	<!-- selectOne 내부 SQL 수행하고났더니 resultMap에 board_rm 돼있어서 그거 찾아가서 실행
	위에 보니까 id가 board_rm인 resultMap이 있다
	그 안에 collection 두개 들어있어서 각각 selectImageList, selectCommentList sql실행
	따라서 Mapper에서 메서드 하나 수행시켰는데 xml select가 총 세 개 수행된다!!!! -->
	<!-- 조회 결과를 Board DTO의 필드에 넣어주겠다 근데 resultType말고 resultMap 쓸거다 -->
	<!-- 원래는 결과가 담긴 dto를 쓰는 건데
	boardDTO랑 연결돼있다->select의 결과가 board -->
	<select id="selectOne" resultMap="board_rm">
	SELECT BOARD_NO, BOARD_TITLE , BOARD_CONTENT ,BOARD_CODE ,READ_COUNT ,
	MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,
	TO_CHAR(BOARD_WRITE_DATE,'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_WRITE_DATE,
	
	TO_CHAR(BOARD_UPDATE_DATE,'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_UPDATE_DATE,
	
	(SELECT COUNT(*)FROM "BOARD_LIKE"
		WHERE BOARD_NO=#{boardNo}) LIKE_COUNT,
	(SELECT IMG_PATH||IMG_RENAME
			FROM "BOARD_IMG" 
			WHERE BOARD_NO=#{boardNo}
			AND IMG_ORDER=0) THUMBNAIL,
			(SELECT COUNT(*) FROM "BOARD_LIKE"
				WHERE MEMBER_NO =#{memberNo}
				AND BOARD_NO =#{boardNo}) LIKE_CHECK
		
FROM "BOARD"
JOIN "MEMBER" USING(MEMBER_NO)
WHERE BOARD_DEL_FL ='N'
AND BOARD_CODE=#{boardCode}
AND BOARD_NO =#{boardNo}
	</select>
	<!-- 상세 조회한 게시글의 이미지 목록 조회 -->
	<select id="selectImageList" resultType="BoardImg">
	SELECT * FROM "BOARD_IMG"
	WHERE BOARD_NO =#{boardNo}
	ORDER BY IMG_ORDER
	</select>
	<!-- 이거 수행하면 리스트가 반환되는데 -->
	
	<!-- 상세 조회한 게시글의 댓글 목록 조회 -->
	<!-- Comment DTO로 저장될거다 -->
	<select id="selectCommentList" resultType="Comment">
	
	SELECT LEVEL, C.* 
FROM
		(SELECT COMMENT_NO, COMMENT_CONTENT,
		  TO_CHAR(COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COMMENT_WRITE_DATE,
		    BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_COMMENT_NO, COMMENT_DEL_FL
		FROM "COMMENT"
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO = #{boardNo}) C --서브쿼리의 결과가 테이블 됨
WHERE COMMENT_DEL_FL = 'N'
	OR 0 != (SELECT COUNT(*) FROM "COMMENT" SUB
					WHERE SUB.PARENT_COMMENT_NO = C.COMMENT_NO
					AND COMMENT_DEL_FL = 'N')
	START WITH PARENT_COMMENT_NO IS NULL
	CONNECT BY PRIOR COMMENT_NO = PARENT_COMMENT_NO
	ORDER SIBLINGS BY COMMENT_NO
	
	</select>
	<!-- START 부터 ORDER가 계층형 쿼리 -->
	
	<!-- 게시글 좋아요 해제 -->
	<delete id="deleteBoardLike">
	DELETE FROM "BOARD_LIKE"
	WHERE MEMBER_NO =#{memberNo} 
	AND BOARD_NO = #{boardNo}
	</delete>
	
	<!-- 게시글 좋아요 체크  -->
	<insert id="insertBoardLike">
	INSERT INTO "BOARD_LIKE"(MEMBER_NO, BOARD_NO)
	VALUES (#{memberNo},#{boardNo})
	
	</insert>
	
	<!-- 게시글 좋아요 수 조회 -->
	<!-- select의 resultType은 별칭이 지정돼있는 경우에는 안써도 되는데 쓰는 것이 좋다 -->
	<select id="selectLikeCount" resultType="_int">
	SELECT COUNT(*) FROM "BOARD_LIKE"
	WHERE BOARD_NO=#{boardNo}
	
	</select>
	<!-- #{}내부 키 값은 map이나 dto로 담겨서 올 때에만 중요하고, 값이 하나만 들어올 때에는 이름 다르게 해도 된다!!
	temp로 넘겨줬는데 넘겨준 것이 그거밖에 없어서 mapper에서 boardNo라고 해도 된다 -->
	
	<!-- 조회수 1 증가 -->
	<update id="updateReadCount">
	UPDATE "BOARD" SET
	READ_COUNT = READ_COUNT+1
	WHERE BOARD_NO = #{boardNo}
	</update>
	<!-- 우변의 READ_COUNT는 증가 전의 READ_COUNT값이 나올 거고 거기에 1 더해서 좌변에 다시 대입해줌 -->
	
	<!-- 조회수를 조회 -->
	<select id="selectReadCount" resultType="_int">
	SELECT READ_COUNT
	FROM "BOARD"
	WHERE BOARD_NO = #{boardNo}
	
	</select>
	
	<!-- 검색 조건에 맞는 게시글 수 조회하기 -->
	<!-- 동적 SQL
	if문으로 해도 되긴 한다!
	동적 SQL 	: <choose>, <when>, <otherwise>
	<choose> 	: 조건문을 작성할 영역 지정 -> 내부에 <when>, <otherwise> 태그를 작성할 수 있다!
	<when> 		: if, else if의 역할의 태그!!
					-test 속성 : 조건식을 작성하는 속성
	<otherwise> : else역할의 태그!!
	
	파라미터로 paramMap을 받아왔는데 key, query, boardCode있다
	
	자바에서 ''는 char인데
	html에서 넘어오느 key는 String임
	"t" != 't'
	-->
	<select id="getSearchCount">
		SELECT COUNT(*)
		FROM "BOARD"
		<!-- 작성자 검색인 경우 if문 -->
		<if test='key =="w"'>
		JOIN "MEMBER" USING (MEMBER_NO)
		</if>
		
		WHERE BOARD_DEL_FL='N'
		AND BOARD_CODE=#{boardCode}
		<choose>
		
		<!-- 제목으로만 검색(key 값이 "t"인 경우일 때) 
		$를 사용하는 것 지양-->
		<when test='key == "t"'>
		AND BOARD_TITLE LIKE '%' || #{query} || '%'
		</when>
		
		<!-- 내용으로만 검색(key 값이 "c"인 경우일 때) 
		$를 사용하는 것 지양-->
		<when test='key == "c"'>
		AND BOARD_CONTENT LIKE '%' || #{query} || '%'
		</when>
		
		<!-- 제목+내용으로 검색(key 값이 "tc"인 경우일 때) 
		$를 사용하는 것 지양-->
		<when test='key == "tc"'>
		AND (BOARD_TITLE LIKE '%' || #{query} || '%'
					OR 
			BOARD_CONTENT LIKE '%' || #{query} || '%')
		</when>
		
		<!-- 작성자 검색 (key값이 "w"인 경우) -->
		<otherwise>
		 AND MEMBER_NICKNAME LIKE '%' || #{query} || '%'
		</otherwise>
		</choose>
	</select>
	
	<!-- 지정된 페이지의 검색 결과 목록을 조회하기 -->
	<select id="selectSearchList">
	SELECT BOARD_NO, BOARD_TITLE , MEMBER_NICKNAME,READ_COUNT,
	
	(SELECT COUNT(*)
	FROM "COMMENT" C
	WHERE C.BOARD_NO = B.BOARD_NO
	AND COMMENT_DEL_FL='N') COMMENT_COUNT,
	(SELECT COUNT(*)
	FROM BOARD_LIKE L
	WHERE L.BOARD_NO=B.BOARD_NO) LIKE_COUNT,
	<![CDATA[ 
		CASE --이 네 가지 중 하나를 선택해서 한 컬럼이 나온다
			WHEN SYSDATE-BOARD_WRITE_DATE < 1/24/60 
			THEN FLOOR((SYSDATE-BOARD_WRITE_DATE)*24*60*60)||'초 전'
			
			WHEN SYSDATE-BOARD_WRITE_DATE < 1/24 
			THEN FLOOR((SYSDATE-BOARD_WRITE_DATE)*24*60)||'분 전'
			
			WHEN SYSDATE-BOARD_WRITE_DATE < 1 
			THEN FLOOR((SYSDATE-BOARD_WRITE_DATE)*24)||'시간 전'
			
			ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD') --아무 케이스에도 안 들어가는 경우
		END BOARD_WRITE_DATE --별칭
	]]>
	FROM "BOARD" B
	JOIN "MEMBER" USING(MEMBER_NO)
	WHERE BOARD_DEL_FL ='N'
	AND BOARD_CODE= #{boardCode}
	<choose>
		
		<!-- 제목으로만 검색(key 값이 "t"인 경우일 때) 
		$를 사용하는 것 지양-->
		<when test='key == "t"'>
		AND BOARD_TITLE LIKE '%' || #{query} || '%'
		</when>
		
		<!-- 내용으로만 검색(key 값이 "c"인 경우일 때) 
		$를 사용하는 것 지양-->
		<when test='key == "c"'>
		AND BOARD_CONTENT LIKE '%' || #{query} || '%'
		</when>
		
		<!-- 제목+내용으로 검색(key 값이 "tc"인 경우일 때) 
		$를 사용하는 것 지양-->
		<when test='key == "tc"'>
		AND (BOARD_TITLE LIKE '%' || #{query} || '%'
					OR 
			BOARD_CONTENT LIKE '%' || #{query} || '%')
		</when>
		
		<!-- 작성자 검색 (key값이 "w"인 경우) -->
		<otherwise>
		 AND MEMBER_NICKNAME LIKE '%' || #{query} || '%'
		</otherwise>
		</choose>
	ORDER BY BOARD_NO DESC
	
	</select>
</mapper>
