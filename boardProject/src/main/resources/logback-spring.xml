<configuration scan="true" scanPeriod="60 seconds">
<!-- 로그들을 스캔할 건데 60초마다 로그 내용을 파일에 기록 -> 더 자주 하고 싶으면 시간을 줄이면 된다 -->
<!-- configuration : logback 관련 설정을 하겠다 -->
	<!-- 1분(60초) 마다 설정 변경 사항을 파악한 후 갱신-->
	
	<!-- config.properties에 아래 내용 추가
	
		log.config.path(로그 파일 저장 경로)
		log.config.fileName(로그 파일 이름)
	-->
	
	<!-- 설정 값을 읽어들일 외부 파일 지정-->
	<property resource="config.properties" />
	
	<!-- logback-spring.xml에서 사용할 변수 선언 -->
   	<property name="logPath"		value="${log.config.path}" /> <!-- config.properties에서 얻어온 값-->
  	<property name="fileName"		value="${log.config.fileName}" />  <!-- config.properties에서 얻어온 값-->
   	<property name="maxHistory"		value="30" />
   	<!-- 30일치를 저장할 수 있음 -->
   	<property name="maxFileSize"	value="10MB" />
	<!-- 파일 하나 당 최대 10메가 용량 -->

	<!--============================ 스프링 부트 기본 로그 설정 (안하면 안 보일 수 있어서 다시 만듦(실행 시 콘솔에 스프링 모양*색 찍히는 것))============================-->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />    
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />    
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />     
   
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){green} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>    
    <property name="CONSOLE_LOG_CHARSET" value="${CONSOLE_LOG_CHARSET:-default}"/>     
    
    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>    
    <property name="FILE_LOG_CHARSET" value="${FILE_LOG_CHARSET:-default}"/>
    
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">        
		<encoder>            
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>            
			<charset>${CONSOLE_LOG_CHARSET}</charset>        
		</encoder>    
	</appender>      
	  
	<include resource="org/springframework/boot/logging/logback/file-appender.xml" />        
	<logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>    
	<logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>    
	<logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>    
	<logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>    
	<logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>   
	<logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>    
	<logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>    
	<logger name="org.springframework.boot.actuate.endpoint.jmx" level="WARN"/>
	<!--============================ 스프링 부트 기본 로그 설정 ============================-->



	<!-- 로그를 파일로 저장 -->
	<appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 파일의 크기가 커지면 새 파일이 만들어지고, 날짜가 바뀌어도 새 파일이 만들어짐 -->
		<!-- Rolling 정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 정책(규칙)을 수립해 줘야 함 -->
			<!-- 로그 파일이 저장될 위치, 파일명 패턴 지정-->
			<fileNamePattern>${logPath}${fileName}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
			<!-- 같은 날짜에 파일이 많이 찍히면 i가 0부터 증가하게 됨 -->
			
			<!-- 로그파일 최대 보관일 -->
			<maxHistory>${maxHistory}</maxHistory>
			
			<!-- 로그 파일당 최고 용량 kb, mb, gb -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${maxFileSize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<!-- 출력되는 로그의 패턴, 인코딩 -> 위의 스프링 기본 모양 그대로 만들어서 파일로 출력할거다-->
		<encoder>
			<pattern>${FILE_LOG_PATTERN}</pattern>            
			<charset>${FILE_LOG_CHARSET}</charset>     
		</encoder>

	</appender>

	
	<!-- 
		* 로그 레벨 : TRACE < DEBUIG < INFO < WARN < ERROR
		(로그 레벨 지정 시 지정된 레벨 + 상위 레벨만 출력됨)
	-->
	
	<!-- 기본 로그 출력 레벨, 로그 작성 객체(appender) 지정-->
	<root level="INFO">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="ROLLING" />
	</root>
	<!-- CONSOLE, ROLLING -> INFO레벨부터 화면에 찍고 파일에도 찍을거다 -->
	<!-- root는 기본값 -->

	<!-- 별로 로그 출력 설정 시 작성하는 태그 -->
	<!-- 
    <logger name="edu.kh.project" level="DEBUG">
        <appender-ref ref="ROLLING" />
    </logger>
 	-->
 	<!-- logger는 추가적으로!! 라는 뜻! -->
	<!-- root : 기본적으로 -->
</configuration>